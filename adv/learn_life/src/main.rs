fn main() {
	{ //'a
		let mut data: Vec<i32> = vec![1, 2, 3];
		{ //'b
			let x: &i32 = &data[0];

			Vec::push(&mut data, 4);

			println!("x: {}", x);
		}
	}

	//Rust对生命周期的检查，是怎么做的？
	//检查在使用的范围内是否有效
	//分析：1、x的使用范围是5-9;
	//		2、第7行对data进行了修改，Rust就认为data已经变化了，不是之前那个有效的data了
	//      3、就直接认为data失效了
	//      4、就判定x在它的范围内没有有效，报错


	//引用的规则：1、引用的范围不能超过被引用的内容的生命周期;
	//2、可变引用不允许别名的存在
}
